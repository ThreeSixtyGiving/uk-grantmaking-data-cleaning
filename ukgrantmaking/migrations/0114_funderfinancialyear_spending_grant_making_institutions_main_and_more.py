# Generated by Django 5.0.6 on 2025-03-24 15:17

import django.db.models.expressions
import django.db.models.functions.comparison
import django.db.models.lookups
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("ukgrantmaking", "0113_alter_grant_lottery_grant_type"),
    ]

    operations = [
        migrations.RenameField(
            model_name="funderfinancialyear",
            old_name="spending_grant_making_institutions_unknown",
            new_name="spending_grant_making_institutions_main",
        ),
        migrations.RenameField(
            model_name="funderyear",
            old_name="spending_grant_making_institutions_unknown_360Giving",
            new_name="spending_grant_making_institutions_main_360Giving",
        ),
        migrations.RenameField(
            model_name="funderyear",
            old_name="spending_grant_making_institutions_unknown_manual",
            new_name="spending_grant_making_institutions_main_manual",
        ),
        migrations.RenameField(
            model_name="funderyear",
            old_name="spending_grant_making_institutions_unknown_registered",
            new_name="spending_grant_making_institutions_main_registered",
        ),
        migrations.AddField(
            model_name="funderfinancialyear",
            name="spending_grant_making_institutions_unknown",
            field=models.BigIntegerField(blank=True, editable=False, null=True),
        ),
        migrations.AddField(
            model_name="funderyear",
            name="spending_grant_making_institutions_unknown_360Giving",
            field=models.DecimalField(
                blank=True, decimal_places=2, max_digits=16, null=True
            ),
        ),
        migrations.AddField(
            model_name="funderyear",
            name="spending_grant_making_institutions_unknown_manual",
            field=models.DecimalField(
                blank=True, decimal_places=2, max_digits=16, null=True
            ),
        ),
        migrations.AddField(
            model_name="funderyear",
            name="spending_grant_making_institutions_unknown_registered",
            field=models.DecimalField(
                blank=True, decimal_places=2, max_digits=16, null=True
            ),
        ),
        migrations.AlterField(
            model_name="cleaningstatus",
            name="sort_by",
            field=models.CharField(
                choices=[
                    (
                        "Grantmaker",
                        [
                            ("financial_year_end", "Financial Year End"),
                            ("income", "Income"),
                            ("income_investment", "Income investment"),
                            ("spending", "Spending"),
                            ("spending_investment", "Spending investment"),
                            ("spending_charitable", "Spending charitable"),
                            ("spending_grant_making", "Spending grant making"),
                            (
                                "spending_grant_making_individuals",
                                "Spending grant making individuals",
                            ),
                            (
                                "spending_grant_making_institutions_charitable",
                                "Spending grant making institutions charitable",
                            ),
                            (
                                "spending_grant_making_institutions_noncharitable",
                                "Spending grant making institutions noncharitable",
                            ),
                            (
                                "spending_grant_making_institutions_unknown",
                                "Spending grant making institutions unknown",
                            ),
                            (
                                "spending_grant_making_institutions_main",
                                "Spending grant making institutions main",
                            ),
                            (
                                "spending_grant_making_institutions",
                                "Spending grant making institutions",
                            ),
                            ("total_net_assets", "Total net assets"),
                            ("funds", "Funds"),
                            ("funds_endowment", "Funds endowment"),
                            ("funds_restricted", "Funds restricted"),
                            ("funds_unrestricted", "Funds unrestricted"),
                            ("employees", "Employees"),
                            ("checked", "Checked"),
                            ("funder__org_id", "Funder ID"),
                            ("funder__name", "Funder Name"),
                            ("funder__status", "Funder status"),
                            ("funder__date_of_registration", "Registration date"),
                            ("funder__date_of_removal", "Removal date"),
                            ("funder__active", "Funder Active"),
                            (
                                "funder__latest_year__scaling",
                                "Grantmaker size (latest)",
                            ),
                            ("scaling", "Grantmaker size"),
                            ("tags__tag", "Tags"),
                            ("segment", "Segment"),
                            ("category", "Category"),
                            ("included", "Included"),
                            (
                                "makes_grants_to_individuals",
                                "Makes grants to individuals",
                            ),
                            ("checked_on", "Checked on"),
                            ("checked_by", "Checked by"),
                            ("notes", "Notes"),
                            ("date_added", "Date added"),
                            ("date_updated", "Date updated"),
                        ],
                    ),
                    (
                        "Grant",
                        [
                            ("title", "Title"),
                            ("description", "Description"),
                            ("currency", "Currency"),
                            ("amount_awarded", "Amount awarded"),
                            ("amount_awarded_GBP", "Amount awarded GBP"),
                            ("award_date", "Award date"),
                            ("planned_dates_duration", "Planned dates duration"),
                            ("planned_dates_startDate", "Planned dates startDate"),
                            ("planned_dates_endDate", "Planned dates endDate"),
                            ("recipient_organisation_id", "Recipient organisation id"),
                            (
                                "recipient_organisation_name",
                                "Recipient organisation name",
                            ),
                            ("recipient_individual_id", "Recipient individual id"),
                            ("recipient_individual_name", "Recipient individual name"),
                            (
                                "recipient_individual_primary_grant_reason",
                                "Recipient individual primary grant reason",
                            ),
                            (
                                "recipient_individual_secondary_grant_reason",
                                "Recipient individual secondary grant reason",
                            ),
                            (
                                "recipient_individual_grant_purpose",
                                "Recipient individual grant purpose",
                            ),
                            ("recipient_type", "Recipient type"),
                            ("funding_organisation_id", "Funding organisation id"),
                            ("funding_organisation_name", "Funding organisation name"),
                            ("funding_organisation_type", "Funding organisation type"),
                            ("regrant_type", "Regrant type"),
                            ("location_scope", "Location scope"),
                            ("grant_programme_title", "Grant programme title"),
                            ("publisher_prefix", "Publisher prefix"),
                            ("publisher_name", "Publisher name"),
                            ("license", "License"),
                            ("recipient_location_rgn", "Recipient location rgn"),
                            ("recipient_location_ctry", "Recipient location ctry"),
                            ("beneficiary_location_rgn", "Beneficiary location rgn"),
                            ("beneficiary_location_ctry", "Beneficiary location ctry"),
                            ("funder", "Funder"),
                            ("recipient", "Recipient"),
                            ("recipient_type_manual", "Recipient type manual"),
                            ("inclusion", "Inclusion"),
                            ("notes", "Notes"),
                            ("checked_by", "Checked by"),
                            ("annual_amount", "Annual amount"),
                        ],
                    ),
                ],
                default="funder__latest_year__scaling",
                max_length=255,
            ),
        ),
        migrations.AlterField(
            model_name="cleaningstatusquery",
            name="field",
            field=models.CharField(
                choices=[
                    (
                        "Grantmaker",
                        [
                            ("financial_year_end", "Financial Year End"),
                            ("income", "Income"),
                            ("income_investment", "Income investment"),
                            ("spending", "Spending"),
                            ("spending_investment", "Spending investment"),
                            ("spending_charitable", "Spending charitable"),
                            ("spending_grant_making", "Spending grant making"),
                            (
                                "spending_grant_making_individuals",
                                "Spending grant making individuals",
                            ),
                            (
                                "spending_grant_making_institutions_charitable",
                                "Spending grant making institutions charitable",
                            ),
                            (
                                "spending_grant_making_institutions_noncharitable",
                                "Spending grant making institutions noncharitable",
                            ),
                            (
                                "spending_grant_making_institutions_unknown",
                                "Spending grant making institutions unknown",
                            ),
                            (
                                "spending_grant_making_institutions_main",
                                "Spending grant making institutions main",
                            ),
                            (
                                "spending_grant_making_institutions",
                                "Spending grant making institutions",
                            ),
                            ("total_net_assets", "Total net assets"),
                            ("funds", "Funds"),
                            ("funds_endowment", "Funds endowment"),
                            ("funds_restricted", "Funds restricted"),
                            ("funds_unrestricted", "Funds unrestricted"),
                            ("employees", "Employees"),
                            ("checked", "Checked"),
                            ("funder__org_id", "Funder ID"),
                            ("funder__name", "Funder Name"),
                            ("funder__status", "Funder status"),
                            ("funder__date_of_registration", "Registration date"),
                            ("funder__date_of_removal", "Removal date"),
                            ("funder__active", "Funder Active"),
                            (
                                "funder__latest_year__scaling",
                                "Grantmaker size (latest)",
                            ),
                            ("scaling", "Grantmaker size"),
                            ("tags__tag", "Tags"),
                            ("segment", "Segment"),
                            ("category", "Category"),
                            ("included", "Included"),
                            (
                                "makes_grants_to_individuals",
                                "Makes grants to individuals",
                            ),
                            ("checked_on", "Checked on"),
                            ("checked_by", "Checked by"),
                            ("notes", "Notes"),
                            ("date_added", "Date added"),
                            ("date_updated", "Date updated"),
                        ],
                    ),
                    (
                        "Grant",
                        [
                            ("title", "Title"),
                            ("description", "Description"),
                            ("currency", "Currency"),
                            ("amount_awarded", "Amount awarded"),
                            ("amount_awarded_GBP", "Amount awarded GBP"),
                            ("award_date", "Award date"),
                            ("planned_dates_duration", "Planned dates duration"),
                            ("planned_dates_startDate", "Planned dates startDate"),
                            ("planned_dates_endDate", "Planned dates endDate"),
                            ("recipient_organisation_id", "Recipient organisation id"),
                            (
                                "recipient_organisation_name",
                                "Recipient organisation name",
                            ),
                            ("recipient_individual_id", "Recipient individual id"),
                            ("recipient_individual_name", "Recipient individual name"),
                            (
                                "recipient_individual_primary_grant_reason",
                                "Recipient individual primary grant reason",
                            ),
                            (
                                "recipient_individual_secondary_grant_reason",
                                "Recipient individual secondary grant reason",
                            ),
                            (
                                "recipient_individual_grant_purpose",
                                "Recipient individual grant purpose",
                            ),
                            ("recipient_type", "Recipient type"),
                            ("funding_organisation_id", "Funding organisation id"),
                            ("funding_organisation_name", "Funding organisation name"),
                            ("funding_organisation_type", "Funding organisation type"),
                            ("regrant_type", "Regrant type"),
                            ("location_scope", "Location scope"),
                            ("grant_programme_title", "Grant programme title"),
                            ("publisher_prefix", "Publisher prefix"),
                            ("publisher_name", "Publisher name"),
                            ("license", "License"),
                            ("recipient_location_rgn", "Recipient location rgn"),
                            ("recipient_location_ctry", "Recipient location ctry"),
                            ("beneficiary_location_rgn", "Beneficiary location rgn"),
                            ("beneficiary_location_ctry", "Beneficiary location ctry"),
                            ("funder", "Funder"),
                            ("recipient", "Recipient"),
                            ("recipient_type_manual", "Recipient type manual"),
                            ("inclusion", "Inclusion"),
                            ("notes", "Notes"),
                            ("checked_by", "Checked by"),
                            ("annual_amount", "Annual amount"),
                        ],
                    ),
                ],
                max_length=255,
            ),
        ),
        migrations.RemoveField(
            model_name="funderyear",
            name="spending_grant_making",
        ),
        migrations.AddField(
            model_name="funderyear",
            name="spending_grant_making",
            field=models.GeneratedField(
                db_persist=True,
                expression=django.db.models.expressions.CombinedExpression(
                    models.Case(
                        models.When(
                            django.db.models.lookups.IsNull(
                                django.db.models.functions.comparison.Coalesce(
                                    "spending_grant_making_institutions_charitable_manual",
                                    "spending_grant_making_institutions_noncharitable_manual",
                                    "spending_grant_making_institutions_unknown_manual",
                                    output_field=models.BigIntegerField(),
                                ),
                                False,
                            ),
                            then=django.db.models.expressions.CombinedExpression(
                                django.db.models.expressions.CombinedExpression(
                                    django.db.models.functions.comparison.Coalesce(
                                        "spending_grant_making_institutions_charitable_manual",
                                        0,
                                        output_field=models.BigIntegerField(),
                                    ),
                                    "+",
                                    django.db.models.functions.comparison.Coalesce(
                                        "spending_grant_making_institutions_noncharitable_manual",
                                        0,
                                        output_field=models.BigIntegerField(),
                                    ),
                                ),
                                "+",
                                django.db.models.functions.comparison.Coalesce(
                                    "spending_grant_making_institutions_unknown_manual",
                                    0,
                                    output_field=models.BigIntegerField(),
                                ),
                                output_field=models.BigIntegerField(),
                            ),
                        ),
                        models.When(
                            django.db.models.lookups.IsNull(
                                django.db.models.functions.comparison.Cast(
                                    "spending_grant_making_institutions_main_manual",
                                    output_field=models.BigIntegerField(),
                                ),
                                False,
                            ),
                            then=django.db.models.functions.comparison.Coalesce(
                                "spending_grant_making_institutions_main_manual",
                                0,
                                output_field=models.BigIntegerField(),
                            ),
                        ),
                        models.When(
                            django.db.models.lookups.IsNull(
                                django.db.models.functions.comparison.Coalesce(
                                    "spending_grant_making_institutions_charitable_registered",
                                    "spending_grant_making_institutions_noncharitable_registered",
                                    "spending_grant_making_institutions_unknown_registered",
                                    output_field=models.BigIntegerField(),
                                ),
                                False,
                            ),
                            then=django.db.models.expressions.CombinedExpression(
                                django.db.models.expressions.CombinedExpression(
                                    django.db.models.functions.comparison.Coalesce(
                                        "spending_grant_making_institutions_charitable_registered",
                                        0,
                                        output_field=models.BigIntegerField(),
                                    ),
                                    "+",
                                    django.db.models.functions.comparison.Coalesce(
                                        "spending_grant_making_institutions_noncharitable_registered",
                                        0,
                                        output_field=models.BigIntegerField(),
                                    ),
                                ),
                                "+",
                                django.db.models.functions.comparison.Coalesce(
                                    "spending_grant_making_institutions_unknown_registered",
                                    0,
                                    output_field=models.BigIntegerField(),
                                ),
                                output_field=models.BigIntegerField(),
                            ),
                        ),
                        models.When(
                            django.db.models.lookups.IsNull(
                                django.db.models.functions.comparison.Cast(
                                    "spending_grant_making_institutions_main_registered",
                                    output_field=models.BigIntegerField(),
                                ),
                                False,
                            ),
                            then=django.db.models.functions.comparison.Coalesce(
                                "spending_grant_making_institutions_main_registered",
                                0,
                                output_field=models.BigIntegerField(),
                            ),
                        ),
                        models.When(
                            django.db.models.lookups.IsNull(
                                django.db.models.functions.comparison.Coalesce(
                                    "spending_grant_making_institutions_charitable_360Giving",
                                    "spending_grant_making_institutions_noncharitable_360Giving",
                                    "spending_grant_making_institutions_unknown_360Giving",
                                    output_field=models.BigIntegerField(),
                                ),
                                False,
                            ),
                            then=django.db.models.expressions.CombinedExpression(
                                django.db.models.expressions.CombinedExpression(
                                    django.db.models.functions.comparison.Coalesce(
                                        "spending_grant_making_institutions_charitable_360Giving",
                                        0,
                                        output_field=models.BigIntegerField(),
                                    ),
                                    "+",
                                    django.db.models.functions.comparison.Coalesce(
                                        "spending_grant_making_institutions_noncharitable_360Giving",
                                        0,
                                        output_field=models.BigIntegerField(),
                                    ),
                                ),
                                "+",
                                django.db.models.functions.comparison.Coalesce(
                                    "spending_grant_making_institutions_unknown_360Giving",
                                    0,
                                    output_field=models.BigIntegerField(),
                                ),
                                output_field=models.BigIntegerField(),
                            ),
                        ),
                        models.When(
                            django.db.models.lookups.IsNull(
                                django.db.models.functions.comparison.Cast(
                                    "spending_grant_making_institutions_main_360Giving",
                                    output_field=models.BigIntegerField(),
                                ),
                                False,
                            ),
                            then=django.db.models.functions.comparison.Coalesce(
                                "spending_grant_making_institutions_main_360Giving",
                                0,
                                output_field=models.BigIntegerField(),
                            ),
                        ),
                        models.When(
                            django.db.models.lookups.IsNull(
                                django.db.models.functions.comparison.Coalesce(
                                    "spending_grant_making_individuals_manual",
                                    "spending_grant_making_individuals_registered",
                                    "spending_grant_making_individuals_360Giving",
                                    output_field=models.BigIntegerField(),
                                ),
                                False,
                            ),
                            then=django.db.models.functions.Cast(
                                0, output_field=models.BigIntegerField()
                            ),
                        ),
                    ),
                    "+",
                    django.db.models.functions.comparison.Coalesce(
                        "spending_grant_making_individuals_manual",
                        "spending_grant_making_individuals_registered",
                        "spending_grant_making_individuals_360Giving",
                        0,
                        output_field=models.BigIntegerField(),
                    ),
                    output_field=models.BigIntegerField(),
                ),
                output_field=models.BigIntegerField(),
            ),
        ),
        migrations.RemoveField(
            model_name="funderyear",
            name="spending_grant_making_institutions",
        ),
        migrations.AddField(
            model_name="funderyear",
            name="spending_grant_making_institutions",
            field=models.GeneratedField(
                db_persist=True,
                expression=models.Case(
                    models.When(
                        django.db.models.lookups.IsNull(
                            django.db.models.functions.comparison.Coalesce(
                                "spending_grant_making_institutions_charitable_manual",
                                "spending_grant_making_institutions_noncharitable_manual",
                                "spending_grant_making_institutions_unknown_manual",
                                output_field=models.BigIntegerField(),
                            ),
                            False,
                        ),
                        then=django.db.models.expressions.CombinedExpression(
                            django.db.models.expressions.CombinedExpression(
                                django.db.models.functions.comparison.Coalesce(
                                    "spending_grant_making_institutions_charitable_manual",
                                    0,
                                    output_field=models.BigIntegerField(),
                                ),
                                "+",
                                django.db.models.functions.comparison.Coalesce(
                                    "spending_grant_making_institutions_noncharitable_manual",
                                    0,
                                    output_field=models.BigIntegerField(),
                                ),
                            ),
                            "+",
                            django.db.models.functions.comparison.Coalesce(
                                "spending_grant_making_institutions_unknown_manual",
                                0,
                                output_field=models.BigIntegerField(),
                            ),
                            output_field=models.BigIntegerField(),
                        ),
                    ),
                    models.When(
                        django.db.models.lookups.IsNull(
                            django.db.models.functions.comparison.Cast(
                                "spending_grant_making_institutions_main_manual",
                                output_field=models.BigIntegerField(),
                            ),
                            False,
                        ),
                        then=django.db.models.functions.comparison.Coalesce(
                            "spending_grant_making_institutions_main_manual",
                            0,
                            output_field=models.BigIntegerField(),
                        ),
                    ),
                    models.When(
                        django.db.models.lookups.IsNull(
                            django.db.models.functions.comparison.Coalesce(
                                "spending_grant_making_institutions_charitable_registered",
                                "spending_grant_making_institutions_noncharitable_registered",
                                "spending_grant_making_institutions_unknown_registered",
                                output_field=models.BigIntegerField(),
                            ),
                            False,
                        ),
                        then=django.db.models.expressions.CombinedExpression(
                            django.db.models.expressions.CombinedExpression(
                                django.db.models.functions.comparison.Coalesce(
                                    "spending_grant_making_institutions_charitable_registered",
                                    0,
                                    output_field=models.BigIntegerField(),
                                ),
                                "+",
                                django.db.models.functions.comparison.Coalesce(
                                    "spending_grant_making_institutions_noncharitable_registered",
                                    0,
                                    output_field=models.BigIntegerField(),
                                ),
                            ),
                            "+",
                            django.db.models.functions.comparison.Coalesce(
                                "spending_grant_making_institutions_unknown_registered",
                                0,
                                output_field=models.BigIntegerField(),
                            ),
                            output_field=models.BigIntegerField(),
                        ),
                    ),
                    models.When(
                        django.db.models.lookups.IsNull(
                            django.db.models.functions.comparison.Cast(
                                "spending_grant_making_institutions_main_registered",
                                output_field=models.BigIntegerField(),
                            ),
                            False,
                        ),
                        then=django.db.models.functions.comparison.Coalesce(
                            "spending_grant_making_institutions_main_registered",
                            0,
                            output_field=models.BigIntegerField(),
                        ),
                    ),
                    models.When(
                        django.db.models.lookups.IsNull(
                            django.db.models.functions.comparison.Coalesce(
                                "spending_grant_making_institutions_charitable_360Giving",
                                "spending_grant_making_institutions_noncharitable_360Giving",
                                "spending_grant_making_institutions_unknown_360Giving",
                                output_field=models.BigIntegerField(),
                            ),
                            False,
                        ),
                        then=django.db.models.expressions.CombinedExpression(
                            django.db.models.expressions.CombinedExpression(
                                django.db.models.functions.comparison.Coalesce(
                                    "spending_grant_making_institutions_charitable_360Giving",
                                    0,
                                    output_field=models.BigIntegerField(),
                                ),
                                "+",
                                django.db.models.functions.comparison.Coalesce(
                                    "spending_grant_making_institutions_noncharitable_360Giving",
                                    0,
                                    output_field=models.BigIntegerField(),
                                ),
                            ),
                            "+",
                            django.db.models.functions.comparison.Coalesce(
                                "spending_grant_making_institutions_unknown_360Giving",
                                0,
                                output_field=models.BigIntegerField(),
                            ),
                            output_field=models.BigIntegerField(),
                        ),
                    ),
                    models.When(
                        django.db.models.lookups.IsNull(
                            django.db.models.functions.comparison.Cast(
                                "spending_grant_making_institutions_main_360Giving",
                                output_field=models.BigIntegerField(),
                            ),
                            False,
                        ),
                        then=django.db.models.functions.comparison.Coalesce(
                            "spending_grant_making_institutions_main_360Giving",
                            0,
                            output_field=models.BigIntegerField(),
                        ),
                    ),
                ),
                output_field=models.BigIntegerField(),
            ),
        ),
        migrations.RenameField(
            model_name="funderyear",
            old_name="spending_grant_making_institutions_unknown",
            new_name="spending_grant_making_institutions_main",
        ),
        migrations.AddField(
            model_name="funderyear",
            name="spending_grant_making_institutions_unknown",
            field=models.GeneratedField(
                db_persist=True,
                expression=django.db.models.functions.comparison.Coalesce(
                    "spending_grant_making_institutions_unknown_manual",
                    "spending_grant_making_institutions_unknown_registered",
                    "spending_grant_making_institutions_unknown_360Giving",
                ),
                output_field=models.BigIntegerField(),
            ),
        ),
        migrations.RunSQL(
            """
            CREATE OR REPLACE VIEW ukgrantmaking_funders_view AS
            WITH fy AS (
                SELECT *
                FROM ukgrantmaking_financialyear
                WHERE status IN ('Open', 'Closed')
                    OR "current" 
                ORDER BY fy DESC
                LIMIT 5
            ),
            spend_data AS (
                SELECT coalesce(new_funder_financial_year_id, funder_financial_year_id) AS funder_financial_year_id,
                    max(financial_year_end) AS financial_year_end,
                    sum(income) AS income,
                    sum(income_investment) AS income_investment,
                    sum(spending) AS spending,
                    sum(spending_investment) AS spending_investment,
                    sum(spending_charitable) AS spending_charitable,
                    sum(spending_grant_making) AS spending_grant_making,
                    sum(spending_grant_making_individuals) AS spending_grant_making_individuals,
                    sum(spending_grant_making_institutions) AS spending_grant_making_institutions
                FROM ukgrantmaking_funderyear
                GROUP BY 1
            ),
            balance_sheet AS (
                SELECT DISTINCT ON (coalesce(new_funder_financial_year_id, funder_financial_year_id))
                    coalesce(new_funder_financial_year_id, funder_financial_year_id) AS funder_financial_year_id,
                    financial_year_end,
                    total_net_assets,
                    funds,
                    funds_endowment,
                    funds_restricted,
                    funds_unrestricted,
                    employees,
                    employees_permanent,
                    employees_fixedterm,
                    employees_selfemployed
                FROM ukgrantmaking_funderyear
                ORDER BY coalesce(new_funder_financial_year_id, funder_financial_year_id),
                    financial_year_end DESC
            ),
            tags_year AS (
                SELECT funderfinancialyear_id,
                    array_agg(t.tag) AS tags,
                    string_agg(t.tag, ';') AS tags_list,
                    json_agg(t.tag) AS tags_json
                FROM ukgrantmaking_funderfinancialyear_tags ffyt
                    INNER JOIN ukgrantmaking_fundertag t
                        ON ffyt.fundertag_id = t.slug 
                GROUP BY 1
            ),
            tags AS (
                SELECT funder_id,
                    array_agg(t.tag) AS tags,
                    string_agg(t.tag, ';') AS tags_list,
                    json_agg(t.tag) AS tags_json
                FROM ukgrantmaking_funder_tags ft
                    INNER JOIN ukgrantmaking_fundertag t
                        ON ft.fundertag_id = t.slug 
                GROUP BY 1
            )
            SELECT f.org_id,
                f."name",
                f.segment,
                f.category,
                f.makes_grants_to_individuals,
                tags.tags,
                fy.fy,
                spend_data.financial_year_end,
                spend_data.income,
                spend_data.income_investment,
                spend_data.spending,
                spend_data.spending_investment,
                spend_data.spending_charitable,
                spend_data.spending_grant_making,
                spend_data.spending_grant_making_individuals,
                spend_data.spending_grant_making_institutions,
                balance_sheet.total_net_assets,
                balance_sheet.funds,
                balance_sheet.funds_endowment,
                balance_sheet.funds_restricted,
                balance_sheet.funds_unrestricted,
                balance_sheet.employees,
                balance_sheet.employees_permanent,
                balance_sheet.employees_fixedterm,
                balance_sheet.employees_selfemployed,
                ffy.checked,
                ffy.checked_by_id,
                ffy.checked_on,
                tags.tags_list,
                tags.tags_json,
                tags.tags_json::TEXT AS tags_json_text,
                ffy.segment AS segment_year,
                ffy.category AS category_year,
                ffy.makes_grants_to_individuals AS makes_grants_to_individuals_year,
                tags_year.tags_list as tags_list_year,
                ffy.included AS included_year
            FROM ukgrantmaking_funderfinancialyear ffy 
                INNER JOIN fy
                    ON ffy.financial_year_id = fy.fy 
                INNER JOIN ukgrantmaking_funder f
                    ON ffy.funder_id = f.org_id 
                LEFT OUTER JOIN tags_year
                    ON tags_year.funderfinancialyear_id = ffy.id
                LEFT OUTER JOIN tags
                    ON tags.funder_id = f.org_id
                LEFT OUTER JOIN spend_data
                    ON spend_data.funder_financial_year_id = ffy.id
                LEFT OUTER JOIN balance_sheet
                    ON balance_sheet.funder_financial_year_id = ffy.id
            WHERE f.included
            ORDER BY fy.fy DESC, spending_grant_making DESC NULLS LAST
            """,
            reverse_sql="DROP VIEW ukgrantmaking_funders_view",
        ),
    ]
