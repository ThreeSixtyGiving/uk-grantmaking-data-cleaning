# Generated by Django 5.0.6 on 2025-03-13 16:17

import django.db.models.expressions
import django.db.models.functions.comparison
import django.db.models.lookups
from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("ukgrantmaking", "0111_alter_funderyear_spending_grant_making_and_more"),
    ]

    operations = [
        migrations.RemoveField(
            model_name="funderyear",
            name="spending_grant_making",
        ),
        migrations.AddField(
            model_name="funderyear",
            name="spending_grant_making",
            field=models.GeneratedField(
                db_persist=True,
                expression=django.db.models.expressions.CombinedExpression(
                    models.Case(
                        models.When(
                            django.db.models.lookups.IsNull(
                                django.db.models.functions.comparison.Coalesce(
                                    "spending_grant_making_institutions_charitable_manual",
                                    "spending_grant_making_institutions_noncharitable_manual",
                                    "spending_grant_making_institutions_unknown_manual",
                                    output_field=models.BigIntegerField(),
                                ),
                                False,
                            ),
                            then=django.db.models.expressions.CombinedExpression(
                                django.db.models.expressions.CombinedExpression(
                                    django.db.models.functions.comparison.Coalesce(
                                        "spending_grant_making_institutions_charitable_manual",
                                        0,
                                        output_field=models.BigIntegerField(),
                                    ),
                                    "+",
                                    django.db.models.functions.comparison.Coalesce(
                                        "spending_grant_making_institutions_noncharitable_manual",
                                        0,
                                        output_field=models.BigIntegerField(),
                                    ),
                                ),
                                "+",
                                django.db.models.functions.comparison.Coalesce(
                                    "spending_grant_making_institutions_unknown_manual",
                                    0,
                                    output_field=models.BigIntegerField(),
                                ),
                            ),
                        ),
                        models.When(
                            django.db.models.lookups.IsNull(
                                django.db.models.functions.comparison.Coalesce(
                                    "spending_grant_making_institutions_charitable_registered",
                                    "spending_grant_making_institutions_noncharitable_registered",
                                    "spending_grant_making_institutions_unknown_registered",
                                    output_field=models.BigIntegerField(),
                                ),
                                False,
                            ),
                            then=django.db.models.expressions.CombinedExpression(
                                django.db.models.expressions.CombinedExpression(
                                    django.db.models.functions.comparison.Coalesce(
                                        "spending_grant_making_institutions_charitable_registered",
                                        0,
                                        output_field=models.BigIntegerField(),
                                    ),
                                    "+",
                                    django.db.models.functions.comparison.Coalesce(
                                        "spending_grant_making_institutions_noncharitable_registered",
                                        0,
                                        output_field=models.BigIntegerField(),
                                    ),
                                ),
                                "+",
                                django.db.models.functions.comparison.Coalesce(
                                    "spending_grant_making_institutions_unknown_registered",
                                    0,
                                    output_field=models.BigIntegerField(),
                                ),
                            ),
                        ),
                        models.When(
                            django.db.models.lookups.IsNull(
                                django.db.models.functions.comparison.Coalesce(
                                    "spending_grant_making_institutions_charitable_360Giving",
                                    "spending_grant_making_institutions_noncharitable_360Giving",
                                    "spending_grant_making_institutions_unknown_360Giving",
                                    output_field=models.BigIntegerField(),
                                ),
                                False,
                            ),
                            then=django.db.models.expressions.CombinedExpression(
                                django.db.models.expressions.CombinedExpression(
                                    django.db.models.functions.comparison.Coalesce(
                                        "spending_grant_making_institutions_charitable_360Giving",
                                        0,
                                        output_field=models.BigIntegerField(),
                                    ),
                                    "+",
                                    django.db.models.functions.comparison.Coalesce(
                                        "spending_grant_making_institutions_noncharitable_360Giving",
                                        0,
                                        output_field=models.BigIntegerField(),
                                    ),
                                ),
                                "+",
                                django.db.models.functions.comparison.Coalesce(
                                    "spending_grant_making_institutions_unknown_360Giving",
                                    0,
                                    output_field=models.BigIntegerField(),
                                ),
                            ),
                        ),
                        models.When(
                            django.db.models.lookups.IsNull(
                                django.db.models.functions.comparison.Coalesce(
                                    "spending_grant_making_individuals_manual",
                                    "spending_grant_making_individuals_registered",
                                    "spending_grant_making_individuals_360Giving",
                                    output_field=models.BigIntegerField(),
                                ),
                                False,
                            ),
                            then=0,
                        ),
                    ),
                    "+",
                    django.db.models.functions.comparison.Coalesce(
                        "spending_grant_making_individuals_manual",
                        "spending_grant_making_individuals_registered",
                        "spending_grant_making_individuals_360Giving",
                        0,
                        output_field=models.BigIntegerField(),
                    ),
                ),
                output_field=models.BigIntegerField(),
            ),
        ),
        migrations.RunSQL(
            """
            CREATE OR REPLACE VIEW ukgrantmaking_funders_view AS
            WITH fy AS (
                SELECT *
                FROM ukgrantmaking_financialyear
                WHERE status IN ('Open', 'Closed')
                    OR "current" 
                ORDER BY fy DESC
                LIMIT 5
            ),
            spend_data AS (
                SELECT coalesce(new_funder_financial_year_id, funder_financial_year_id) AS funder_financial_year_id,
                    max(financial_year_end) AS financial_year_end,
                    sum(income) AS income,
                    sum(income_investment) AS income_investment,
                    sum(spending) AS spending,
                    sum(spending_investment) AS spending_investment,
                    sum(spending_charitable) AS spending_charitable,
                    sum(spending_grant_making) AS spending_grant_making,
                    sum(spending_grant_making_individuals) AS spending_grant_making_individuals,
                    sum(spending_grant_making_institutions) AS spending_grant_making_institutions
                FROM ukgrantmaking_funderyear
                GROUP BY 1
            ),
            balance_sheet AS (
                SELECT DISTINCT ON (coalesce(new_funder_financial_year_id, funder_financial_year_id))
                    coalesce(new_funder_financial_year_id, funder_financial_year_id) AS funder_financial_year_id,
                    financial_year_end,
                    total_net_assets,
                    funds,
                    funds_endowment,
                    funds_restricted,
                    funds_unrestricted,
                    employees,
                    employees_permanent,
                    employees_fixedterm,
                    employees_selfemployed
                FROM ukgrantmaking_funderyear
                ORDER BY coalesce(new_funder_financial_year_id, funder_financial_year_id),
                    financial_year_end DESC
            ),
            tags AS (
                SELECT funderfinancialyear_id,
                    array_agg(t.tag) AS tags,
                    string_agg(t.tag, ';') AS tags_list,
                    json_agg(t.tag) AS tags_json
                FROM ukgrantmaking_funderfinancialyear_tags ffyt
                    INNER JOIN ukgrantmaking_fundertag t
                        ON ffyt.fundertag_id = t.slug 
                GROUP BY 1
            )
            SELECT f.org_id,
                f."name",
                ffy.segment,
                ffy.category,
                ffy.makes_grants_to_individuals,
                tags.tags,
                fy.fy,
                spend_data.financial_year_end,
                spend_data.income,
                spend_data.income_investment,
                spend_data.spending,
                spend_data.spending_investment,
                spend_data.spending_charitable,
                spend_data.spending_grant_making,
                spend_data.spending_grant_making_individuals,
                spend_data.spending_grant_making_institutions,
                balance_sheet.total_net_assets,
                balance_sheet.funds,
                balance_sheet.funds_endowment,
                balance_sheet.funds_restricted,
                balance_sheet.funds_unrestricted,
                balance_sheet.employees,
                balance_sheet.employees_permanent,
                balance_sheet.employees_fixedterm,
                balance_sheet.employees_selfemployed,
                ffy.checked,
                ffy.checked_by_id,
                ffy.checked_on,
                tags.tags_list,
                tags.tags_json,
                tags.tags_json::TEXT AS tags_json_text
            FROM ukgrantmaking_funderfinancialyear ffy 
                INNER JOIN fy
                    ON ffy.financial_year_id = fy.fy 
                INNER JOIN ukgrantmaking_funder f
                    ON ffy.funder_id = f.org_id 
                LEFT OUTER JOIN tags
                    ON tags.funderfinancialyear_id = ffy.id
                LEFT OUTER JOIN spend_data
                    ON spend_data.funder_financial_year_id = ffy.id
                LEFT OUTER JOIN balance_sheet
                    ON balance_sheet.funder_financial_year_id = ffy.id
            WHERE ffy.included
            ORDER BY fy.fy DESC, spending_grant_making DESC NULLS LAST
            """,
            reverse_sql="DROP VIEW ukgrantmaking_funders_view",
        ),
    ]
